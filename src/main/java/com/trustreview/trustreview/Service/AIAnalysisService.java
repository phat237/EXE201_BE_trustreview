package com.trustreview.trustreview.Service;

import com.trustreview.trustreview.Model.AIResponse;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.*;

@Service
public class AIAnalysisService {

    private final String GPT_PROXY_URL = "https://api.pawan.krd/cosmosrp/v1/chat/completions";

    public AIResponse analyzeText(Integer star, String content) {
        RestTemplate restTemplate = new RestTemplate();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth("pk-hBQAqSEXPsCMOCvesOnufOcGIuLEjCLmlFjXyOAIvNkQRIZI"); // <-- CH·ªàNH D√íNG N√ÄY


        String prompt = String.format(
                "D∆∞·ªõi ƒë√¢y l√† m·ªôt ƒë√°nh gi√° ng∆∞·ªùi d√πng:\n" +
                        "S·ªë sao (do ng∆∞·ªùi d√πng ƒë√°nh gi√° v·ªÅ s·∫£n ph·∫©m): %d\n" +
                        "N·ªôi dung: \"%s\"\n\n" +
                        "H√£y x√°c ƒë·ªãnh xem ƒë√°nh gi√° n√†y l√† h·ª£p l·ªá (GOOD) hay kh√¥ng h·ª£p l·ªá (SPAM) theo c√°c quy t·∫Øc sau:\n" +
                        "1. N·∫øu n·ªôi dung th·ªÉ hi·ªán s·ª± h√†i l√≤ng, khen s·∫£n ph·∫©m th√¨ s·ªë sao ph·∫£i cao (4 ho·∫∑c 5).\n" +
                        "2. N·∫øu n·ªôi dung th·ªÉ hi·ªán s·ª± kh√¥ng h√†i l√≤ng, ch√™ s·∫£n ph·∫©m th√¨ s·ªë sao ph·∫£i th·∫•p (1 ho·∫∑c 2).\n" +
                        "3. N·∫øu n·ªôi dung v√† s·ªë sao m√¢u thu·∫´n th√¨ ƒë√°nh gi√° l√† SPAM.\n" +
                        "4. N·ªôi dung ph·∫£i r√µ r√†ng, c√≥ l√Ω do c·ª• th·ªÉ, d√†i √≠t nh·∫•t 10 t·ª´ ho·∫∑c 40 k√Ω t·ª±. N·∫øu qu√° ng·∫Øn, xem l√† SPAM.\n" +
                        "5. N·∫øu s·ªë sao l√† 3 (trung t√≠nh), n·ªôi dung ph·∫£i c√≥ l·∫≠p lu·∫≠n trung t√≠nh r√µ r√†ng, n·∫øu kh√¥ng ƒë·ªß th√¨ xem l√† SPAM.\n\n" +
                        "Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng m·ªôt d√≤ng duy nh·∫•t theo format: SPAM - [gi·∫£i th√≠ch] ho·∫∑c GOOD - [gi·∫£i th√≠ch]. " +
                        "Kh√¥ng vi·∫øt th√™m b·∫•t k·ª≥ t·ª´ n√†o kh√°c, kh√¥ng s·ª≠ d·ª•ng markdown, kh√¥ng in ƒë·∫≠m hay in nghi√™ng. " +
                        "Vui l√≤ng tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.",
                star, content
        );








//        Map<String, Object> message = Map.of(
//                "role", "user",
//                "content", prompt
//        );
//
//        Map<String, Object> payload = Map.of(
//                "model", "gpt-3.5-turbo",
//                "messages", List.of(message)
//        );

        Map<String, Object> systemMessage = Map.of(
                "role", "system",
                "content", "B·∫°n l√† m·ªôt AI gi√∫p ph√¢n t√≠ch ƒë√°nh gi√° c·ªßa ng∆∞·ªùi d√πng v·ªÅ s·∫£n ph·∫©m m√† h·ªç ƒë√£ tr·∫£i nghi·ªám."
        );

        Map<String, Object> userMessage = Map.of(
                "role", "user",
                "content", prompt
        );

        Map<String, Object> payload = Map.of(
                "model", "gpt-3.5-turbo",
                "messages", List.of(systemMessage, userMessage)
        );

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(payload, headers);

//        try {
//            ResponseEntity<Map> response = restTemplate.postForEntity(GPT_PROXY_URL, request, Map.class);
//            Map choices = (Map) ((List) response.getBody().get("choices")).get(0);
//            Map messageResponse = (Map) choices.get("message");
//            String fullResponse = (String) messageResponse.get("content");
//
//            // Ph√¢n t√≠ch k·∫øt qu·∫£ GPT tr·∫£ v·ªÅ
//            String[] parts = fullResponse.split(" - ", 2);
//            if (parts.length == 2) {
//                return new AIResponse(parts[0].trim(), parts[1].trim());
//            } else {
//                return new AIResponse("UNKNOWN", fullResponse);
//            }
//        } catch (Exception e) {
//            return new AIResponse("ERROR", "L·ªói khi g·ªçi GPT: " + e.getMessage());
//        }
        try {
            ResponseEntity<Map> response = restTemplate.postForEntity(GPT_PROXY_URL, request, Map.class);
            Map body = response.getBody();

            // üî∂ Ki·ªÉm tra n·∫øu kh√¥ng c√≥ "choices" th√¨ tr·∫£ l·ªói
            if (body == null || body.get("choices") == null) {
                return new AIResponse("ERROR", "Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ GPT (choices=null)");
            }

            Map choices = (Map) ((List) body.get("choices")).get(0);
            Map messageResponse = (Map) choices.get("message");
            String fullResponse = (String) messageResponse.get("content");

            String[] parts = fullResponse.split(" - ", 2);
            if (parts.length == 2) {
                return new AIResponse(parts[0].trim(), parts[1].trim());
            } else {
                return new AIResponse("UNKNOWN", fullResponse);
            }
        } catch (Exception e) {
            return new AIResponse("ERROR", "L·ªói khi g·ªçi GPT: " + e.getMessage());
        }

    }
}
